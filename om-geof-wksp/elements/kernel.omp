; OM File Header - Saved 2013/01/13 14:55:12
; (6.050102 :patc (om-make-point 17 248) (om-make-point 50 50) (om-make-point 500 400) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "kernel" (quote ((om-load-boxcomment "comment" (om-make-point 278 65) (quote "kernel functions to learn") nil (om-make-point 81 14) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "omloop for file operations") nil (om-make-point 526 541) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 116 70) (quote "choose-file-from-dialog (and related functions)") nil (om-make-point 618 322) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "terminal commands") nil (om-make-point 936 412) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 877 337) (om-make-point 77 30) "ls $HOME" "\"ls $HOME\"" nil) (om-load-boxcall (quote genfun) "OM-SHELL" (quote om-shell) (quote ((om-load-inputfun (quote input-funbox) "a system command line" "STR" ""))) (om-make-point 881 404) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "like parse2, parse3, etc.") "" (om-make-point 809 110) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 182 52) (quote "comment this is like the (or .. ) operator in LISP") "" (om-make-point 176 397) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 100) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 334 130) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 476 125) (om-make-point 46 30) (quote linear) "linear" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 408 93) (om-make-point 64 30) (list 2 6 7 8) "(2 6 7 8)" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 171 124) (om-make-point 21 30) 4 "4" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 222 120) (om-make-point 97 30) (list 1 4 1 4 4 6 7) "(1 4 1 4 4 6 7)" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 45 132) (om-make-point 75 30) (list 1 2 3 4 5) "(1 2 3 4 5)" nil) (om-load-boxwithed1 (quote box-with-win) "FILE-BOX" (quote file-box) (quote nil) (om-make-point 465 529) nil nil nil (list (om-load-boxcall (quote lispfun) "PRIN1-TO-STRING" (quote prin1-to-string) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil))) (om-make-point 284 397) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 199 329) nil nil nil nil 3) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 21 292) (om-make-point 72 30) "the start" "\"the start\"" nil) (om-load-boxcall (quote genfun) "FILE-WRITE-LINE" (quote file-write-line) (quote ((om-load-inputfun (quote input-funbox) "a line to write" "LINE" nil) (om-load-inputfun (quote input-funbox) "a file pointer" "STREAM" nil))) (om-make-point 76 341) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FILE-WRITE-LINE" (quote file-write-line) (quote ((om-load-inputfun (quote input-funbox) "a line to write" "LINE" nil) (om-load-inputfun (quote input-funbox) "a file pointer" "STREAM" nil))) (om-make-point 502 455) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 74 47) (om-make-point 28 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 17 50) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 47 128) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 171 91) (om-make-point 71 30) "test1.txt" "\"test1.txt\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 202 138) nil nil nil nil 1) (let ((box (om-load-boxcall (quote genfun) "StreamFile" (quote streamfile) (quote ((om-load-inputfun (quote input-funbox) "pathname or string" "PATHNAME" nil))) (om-make-point 300 204) nil nil nil nil 1))) (setf (filetype box) (quote text) (direction box) :io (if-ex box) :supersede) box) (om-load-seqbox "init" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 113 466) nil nil nil 0) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 560 582) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 192 489) nil nil nil 0)) (quote ((1 1 0 0 nil 0) (7 0 1 0 nil 0) (2 0 3 0 nil 0) (10 0 3 1 nil 0) (0 0 4 0 nil 0) (10 0 4 1 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (8 0 9 0 nil 0) (9 0 10 0 nil 0) (3 0 11 0 nil 0) (4 0 12 0 nil 0) (1 0 13 0 nil 0))) 1 "file-box" nil) (om-load-boxcall (quote genfun) "FILE-CHOOSER" (quote file-chooser) (quote nil) (om-make-point 538 315) nil nil nil nil 1) (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 658 99) (om-make-point 147 59) nil nil nil 4))) (setf (numouts box) 4) box) (om-load-boxcall (quote genfun) "CONDITIONAL" (quote conditional) (quote ((om-load-inputfun (quote input-funbox) "test" "TEST" nil) (om-load-inputfun (quote input-funbox) "add-test" "ADDTEST" 3) (om-load-inputfun (quote input-funbox) "add-test" "ADDTEST" 6))) (om-make-point 52 389) (om-make-point 118 57) nil nil nil 1) (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) "list to group" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "list of group lengths" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 (quote input-funmenu) "normal or circular" "MODE" (quote linear) (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 394 215) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 200 167) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 75 183) nil nil nil nil 1))) (quote ((4 0 5 0 nil 0) (8 0 18 0 nil 0) (10 0 18 1 nil 0) (9 0 18 2 nil 0) (11 0 19 0 nil 0) (12 0 19 1 nil 0) (13 0 20 0 nil 0))) nil 6.050102))
