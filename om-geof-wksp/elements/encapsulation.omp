; OM File Header - Saved 2013/01/11 23:12:19
; (6.050102 :patc (om-make-point 10 60) (om-make-point 823 92) (om-make-point 838 561) "" 183 0 "2013/01/11 16:25:27" "2013/01/11 22:24:04")
; End File Header
(in-package :om)(load-lib-for (quote ("om-geof")))(setf *om-current-persistent* (om-load-patch1 "encapsulation" (quote ((om-load-boxcall (quote abstraction) "mypatch 2" (om-load-patch-abs1 "mypatch 2" (quote ((om-load-boxout "output1" 1 (om-make-point 555 527) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 525 241) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 3" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 722 258) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 4" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 629 227) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxout "output1" 1 (om-make-point 207 625) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input3" 3 (om-make-point 404 93) "" nil nil nil) (om-load-boxin "input2" 2 (om-make-point 273 98) "" nil nil nil) (om-load-boxin "input1" 1 (om-make-point 169 112) "" nil nil nil) (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 136 379) (om-make-point 138 43) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 298 377) (om-make-point 138 43) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 222 288) (om-make-point 138 43) nil nil nil 1))) (quote ((4 0 0 0 nil 0) (6 0 4 2 nil 0) (6 0 5 0 nil 0) (3 0 6 0 nil 0) (2 0 6 1 nil 0) (1 0 6 2 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input1" nil) (om-load-inputfun (quote input-funbox) "" "input2" nil) (om-load-inputfun (quote input-funbox) "" "input3" nil))) (om-make-point 656/3 348) nil nil nil nil) (om-load-boxout "output1" 1 (om-make-point 207 625) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input3" 3 (om-make-point 404 93) "" nil nil nil) (om-load-boxin "input2" 2 (om-make-point 273 98) "" nil nil nil) (om-load-boxin "input1" 1 (om-make-point 169 112) "" nil nil nil))) (quote ((4 0 0 0 nil 0) (3 0 0 1 nil 0) (2 0 0 2 nil 0) (0 0 1 0 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input1" nil) (om-load-inputfun (quote input-funbox) "" "input2" nil) (om-load-inputfun (quote input-funbox) "" "input3" nil))) (om-make-point 550 387) nil nil nil nil))) (quote ((4 0 0 0 nil 0) (1 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 4 2 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 519 216) nil nil nil nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote nil) (om-make-point 719 108) nil nil nil (list (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 521 203) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "PRINT 2" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 180 379) nil nil nil nil 1) (om-load-seqbox "INITDO" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 44 498) nil nil nil 0) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 128 110) (om-make-point 97 30) (list 1 2 3 4 5 6 7) "(1 2 3 4 5 6 7)" nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 115 206) nil nil nil nil 1) (om-load-boxcall (quote genfun) "INSPECT-THIS-PATCH" (quote inspect-this-patch) (quote nil) (om-make-point 395 90) nil (list nil) nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 417 549) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 245 552) nil nil nil 0)) (quote ((4 0 1 0 nil 0) (4 0 2 0 nil 0) (3 0 4 0 nil 0) (1 0 7 0 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 193 293) (om-make-point 103 43) nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 6" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 220 118) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 112 427) (om-make-point 139 43) nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 5" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 351 113) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 116 132) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 426 368) (om-make-point 139 43) nil nil nil 1) (om-load-boxcall (quote genfun) "INSPECT-THIS-PATCH" (quote inspect-this-patch) (quote nil) (om-make-point 542 85) nil (list nil) nil nil 1))) (quote ((6 0 2 0 nil 0) (3 0 2 1 nil 0) (5 0 2 2 nil 0) (2 0 4 1 nil 0) (0 0 7 1 nil 0))) nil 6.050102))
